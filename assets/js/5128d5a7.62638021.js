"use strict";(self.webpackChunkdogsounds_til=self.webpackChunkdogsounds_til||[]).push([[992],{68339:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var o=n(39953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,y=c["".concat(u,".").concat(m)]||c[m]||p[m]||i;return n?o.createElement(y,a(a({ref:t},d),{},{components:n})):o.createElement(y,a({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},55131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=n(855),r=(n(39953),n(68339));const i={},a="23.07.27(\ubaa9)",s={unversionedId:"\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.27",id:"\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.27",title:"23.07.27(\ubaa9)",description:"1. react-query\ub97c \uc774\uc6a9\ud55c \ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8",source:"@site/members/\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.27.md",sourceDirName:"\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d",slug:"/\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.27",permalink:"/TIL/members/\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.27",draft:!1,editUrl:"https://github.com/Self-Driven-Development/TIL/tree/main/members/\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.27.md",tags:[],version:"current",frontMatter:{},sidebar:"all",previous:{title:"23.07.25(\uc218)",permalink:"/TIL/members/\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.26"},next:{title:"23.07.28(\uae08)",permalink:"/TIL/members/\ubc15\uaddc\uc131/Memo/\ucf54\ub4dc \ubd84\uc11d/07.28"}},u={},l=[{value:"1. react-query\ub97c \uc774\uc6a9\ud55c \ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8",id:"1-react-query\ub97c-\uc774\uc6a9\ud55c-\ub099\uad00\uc801-\uc5c5\ub370\uc774\ud2b8",level:2},{value:"\ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8\uc758 \ud575\uc2ec \ucf54\ub4dc",id:"\ub099\uad00\uc801-\uc5c5\ub370\uc774\ud2b8\uc758-\ud575\uc2ec-\ucf54\ub4dc",level:3},{value:"\ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8 \uc774\ud6c4\uc758 \ucf54\ub4dc",id:"\ub099\uad00\uc801-\uc5c5\ub370\uc774\ud2b8-\uc774\ud6c4\uc758-\ucf54\ub4dc",level:3}],d={toc:l},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"230727\ubaa9"},"23.07.27(\ubaa9)"),(0,r.kt)("h2",{id:"1-react-query\ub97c-\uc774\uc6a9\ud55c-\ub099\uad00\uc801-\uc5c5\ub370\uc774\ud2b8"},"1. ",(0,r.kt)("a",{parentName:"h2",href:"https://github.com/TanStack/query/blob/main/examples/react/optimistic-updates-typescript/src/pages/index.tsx"},"react-query\ub97c \uc774\uc6a9\ud55c \ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const client = new QueryClient()\n\ntype Todos = {\n  items: readonly {\n    id: string\n    text: string\n  }[]\n  ts: number\n}\n\nasync function fetchTodos(): Promise<Todos> {\n  const res = await axios.get('/api/data')\n  return res.data\n}\n\nfunction useTodos() {\n  return useQuery({ queryKey: ['todos'], queryFn: fetchTodos })\n}\n\nfunction Example() {\n  const queryClient = useQueryClient()\n  const [text, setText] = React.useState('')\n  const { isFetching, ...queryInfo } = useTodos()\n\n  const addTodoMutation = useMutation({\n    mutationFn: (newTodo) => axios.post('/api/data', { text: newTodo }),\n    // When mutate is called:\n    onMutate: async (newTodo: string) => {\n      setText('')\n      // Cancel any outgoing refetches\n      // (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({ queryKey: ['todos'] })\n\n      // Snapshot the previous value\n      const previousTodos = queryClient.getQueryData<Todos>(['todos'])\n\n      // Optimistically update to the new value\n      if (previousTodos) {\n        queryClient.setQueryData<Todos>(['todos'], {\n          ...previousTodos,\n          items: [\n            ...previousTodos.items,\n            { id: Math.random().toString(), text: newTodo },\n          ],\n        })\n      }\n\n      return { previousTodos }\n    },\n    // If the mutation fails,\n    // use the context returned from onMutate to roll back\n    onError: (err, variables, context) => {\n      if (context?.previousTodos) {\n        queryClient.setQueryData<Todos>(['todos'], context.previousTodos)\n      }\n    },\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\n    },\n  })\n\n  return (\n    <div>\n      <p>\n        In this example, new items can be created using a mutation. The new item\n        will be optimistically added to the list in hopes that the server\n        accepts the item. If it does, the list is refetched with the true items\n        from the list. Every now and then, the mutation may fail though. When\n        that happens, the previous list of items is restored and the list is\n        again refetched from the server.\n      </p>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          addTodoMutation.mutate(text)\n        }}\n      >\n        <input\n          type=\"text\"\n          onChange={(event) => setText(event.target.value)}\n          value={text}\n        />\n        <button disabled={addTodoMutation.isLoading}>Create</button>\n      </form>\n      <br />\n      {queryInfo.isSuccess && (\n        <>\n          <div>\n            {/* The type of queryInfo.data will be narrowed because we check for isSuccess first */}\n            Updated At: {new Date(queryInfo.data.ts).toLocaleTimeString()}\n          </div>\n          <ul>\n            {queryInfo.data.items.map((todo) => (\n              <li key={todo.id}>{todo.text}</li>\n            ))}\n          </ul>\n          {isFetching && <div>Updating in background...</div>}\n        </>\n      )}\n      {queryInfo.isLoading && 'Loading'}\n      {queryInfo.error instanceof Error && queryInfo.error.message}\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={client}>\n      <Example />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  )\n}\n")),(0,r.kt)("h3",{id:"\ub099\uad00\uc801-\uc5c5\ub370\uc774\ud2b8\uc758-\ud575\uc2ec-\ucf54\ub4dc"},"\ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8\uc758 \ud575\uc2ec \ucf54\ub4dc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"onMutate: async (newTodo: string) => {\n  setText('')\n  await queryClient.cancelQueries({ queryKey: ['todos'] })\n  const previousTodos = queryClient.getQueryData<Todos>(['todos'])\n  if (previousTodos) {\n    queryClient.setQueryData<Todos>(['todos'], {\n      ...previousTodos,\n      items: [\n        ...previousTodos.items,\n        { id: Math.random().toString(), text: newTodo },\n      ],\n    })\n  }\n\n  return { previousTodos }\n},\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setText('')")," : input \ucd08\uae30\ud654"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"await queryClient.cancelQueries({ queryKey: ['todos'] })")," : \ucffc\ub9ac\uac00 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uc0c8\ub85c\uc6b4 \ucffc\ub9ac\uac00 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub3c4\ub85d \ucffc\ub9ac\ub97c \ucde8\uc18c"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"const previousTodos = queryClient.getQueryData<Todos>(['todos'])")," : \uc774\uc804 \ucffc\ub9ac \ub370\uc774\ud130\ub97c \uac00\uc838\uc634"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queryClient.setQueryData<Todos>(['todos'], { ...previousTodos, items: [ ...previousTodos.items, { id: Math.random().toString(), text: newTodo }, ], })")," : \uc774\uc804 \ucffc\ub9ac \ub370\uc774\ud130\ub97c \uac00\uc838\uc640\uc11c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \ucd94\uac00\ud55c \ud6c4 \ucffc\ub9ac \ub370\uc774\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 (\uc989, \ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"return { previousTodos }")," : \uc774\uc804 \ucffc\ub9ac \ub370\uc774\ud130\ub97c \ubc18\ud658")),(0,r.kt)("h3",{id:"\ub099\uad00\uc801-\uc5c5\ub370\uc774\ud2b8-\uc774\ud6c4\uc758-\ucf54\ub4dc"},"\ub099\uad00\uc801 \uc5c5\ub370\uc774\ud2b8 \uc774\ud6c4\uc758 \ucf54\ub4dc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"onError: (err, variables, context) => {\n  if (context?.previousTodos) {\n    queryClient.setQueryData<Todos>(['todos'], context.previousTodos)\n  }\n},\n// Always refetch after error or success:\nonSettled: () => {\n  queryClient.invalidateQueries({ queryKey: ['todos'] })\n},\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onError: (err, variables, context) => { if (context?.previousTodos) { queryClient.setQueryData<Todos>(['todos'], context.previousTodos) } }")," : \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74 \uc774\uc804 \ucffc\ub9ac \ub370\uc774\ud130\ub97c \uac00\uc838\uc640\uc11c \ucffc\ub9ac \ub370\uc774\ud130\ub97c \uc5c5\ub370\uc774\ud2b8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onSettled: () => { queryClient.invalidateQueries({ queryKey: ['todos'] }) }")," : \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\ub4e0 \uc131\uacf5\ud558\ub4e0 \ucffc\ub9ac\ub97c \ub2e4\uc2dc \uc2e4\ud589",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queryClient.invalidateQueries({ queryKey: ['todos'] })")," : \uce90\uc2f1\uc744 \ucd08\uae30\ud654, \uc989 \ucffc\ub9ac\ub97c \ub2e4\uc2dc \uc2e4\ud589")))))}p.isMDXComponent=!0}}]);