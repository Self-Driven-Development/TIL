"use strict";(self.webpackChunkdogsounds_til=self.webpackChunkdogsounds_til||[]).push([[16794],{68339:(n,e,i)=>{i.d(e,{Zo:()=>p,kt:()=>s});var t=i(39953);function r(n,e,i){return e in n?Object.defineProperty(n,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[e]=i,n}function a(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.push.apply(i,t)}return i}function l(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?a(Object(i),!0).forEach((function(e){r(n,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))}))}return n}function o(n,e){if(null==n)return{};var i,t,r=function(n,e){if(null==n)return{};var i,t,r={},a=Object.keys(n);for(t=0;t<a.length;t++)i=a[t],e.indexOf(i)>=0||(r[i]=n[i]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)i=a[t],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(r[i]=n[i])}return r}var f=t.createContext({}),m=function(n){var e=t.useContext(f),i=e;return n&&(i="function"==typeof n?n(e):l(l({},e),n)),i},p=function(n){var e=m(n.components);return t.createElement(f.Provider,{value:e},n.children)},c="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},d=t.forwardRef((function(n,e){var i=n.components,r=n.mdxType,a=n.originalType,f=n.parentName,p=o(n,["components","mdxType","originalType","parentName"]),c=m(i),d=r,s=c["".concat(f,".").concat(d)]||c[d]||u[d]||a;return i?t.createElement(s,l(l({ref:e},p),{},{components:i})):t.createElement(s,l({ref:e},p))}));function s(n,e){var i=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=i.length,l=new Array(a);l[0]=d;var o={};for(var f in e)hasOwnProperty.call(e,f)&&(o[f]=e[f]);o.originalType=n,o[c]="string"==typeof n?n:r,l[1]=o;for(var m=2;m<a;m++)l[m]=i[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},44975:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>f,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>m});var t=i(855),r=(i(39953),i(68339));const a={id:"25-\ubaa9"},l="23.05.25.",o={unversionedId:"\uc1a1\uc740\uc218/23/23.05/25-\ubaa9",id:"\uc1a1\uc740\uc218/23/23.05/25-\ubaa9",title:"23.05.25.",description:"Today I Learned",source:"@site/members/\uc1a1\uc740\uc218/23/23.05/25 (\ubaa9).md",sourceDirName:"\uc1a1\uc740\uc218/23/23.05",slug:"/\uc1a1\uc740\uc218/23/23.05/25-\ubaa9",permalink:"/TIL/members/\uc1a1\uc740\uc218/23/23.05/25-\ubaa9",draft:!1,editUrl:"https://github.com/Self-Driven-Development/TIL/tree/main/members/\uc1a1\uc740\uc218/23/23.05/25 (\ubaa9).md",tags:[],version:"current",frontMatter:{id:"25-\ubaa9"},sidebar:"all",previous:{title:"23.05.24.",permalink:"/TIL/members/\uc1a1\uc740\uc218/23/23.05/24-\uc218"},next:{title:"04 (\uc77c)",permalink:"/TIL/members/\uc1a1\uc740\uc218/23/23.06/ 04"}},f={},m=[{value:"Today I Learned",id:"today-i-learned",level:2},{value:"\ucef4\uacf5\uc2e4",id:"\ucef4\uacf5\uc2e4",level:2},{value:"maze \ub9cc\ub4e4\uae30",id:"maze-\ub9cc\ub4e4\uae30",level:3}],p={toc:m},c="wrapper";function u(n){let{components:e,...i}=n;return(0,r.kt)(c,(0,t.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"230525"},"23.05.25."),(0,r.kt)("h2",{id:"today-i-learned"},"Today I Learned"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ucef4\uacf5\uc2e4")),(0,r.kt)("h2",{id:"\ucef4\uacf5\uc2e4"},"\ucef4\uacf5\uc2e4"),(0,r.kt)("h3",{id:"maze-\ub9cc\ub4e4\uae30"},"maze \ub9cc\ub4e4\uae30"),(0,r.kt)("p",null,"\uae30\uc874\uc5d0 \ub9cc\ub4e4\uc5c8\ub358 \ucf54\ub4dc\ub294 \uc9d1\ud569\ubc16\uc5d0 \ub9cc\ub4e4\uc9c0 \ubabb\ud55c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\ud589\uc744 \ub0b4\ub824\uac00\uba70 \ub9cc\ub4dc\ub294 \uacfc\uc815\uc744 \uac1c\ubc1c\uc790\ub294 \uc54c \uc218 \uc788\uc9c0\ub9cc, \ucef4\ud4e8\ud130\ub294 \uc54c\uc9c0 \ubabb\ud55c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uadf8\ub7ec\ubbc0\ub85c \ud55c\uc904\uc744 \ub9cc\ub4e4\ub54c\ub9c8\ub2e4 \ubbf8\ub85c\ub97c \ucc0d\uc5b4\ub0b4\uc57c\ud55c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},'#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint W;\nint H;\nint* horizontalWall;\nint* verticalWall;\nint* maze;\nint num = 1;\n\nFILE* fp;\n\nvoid borderWall() {\n    int i;\n    for (i = 0; i < W; i++) {\n        fprintf(fp, "+-");\n    }\n    fprintf(fp, "+\\n");\n}\n\nvoid firstLine() {\n    int i, j;\n    int prevWall = -1;\n    for (i = 0; i < W - 1; i++) {\n        verticalWall[i] = rand() % 2;//1\uc774\uba74 \ubcbd\uc774 \uc788\uace0, 0\uc774\uba74 \uc5c6\uc74c\n        if (verticalWall[i]) {//\ubcbd\uc774 \uc0dd\uae30\uba74 \uc774\uc804\ube14\ub85d\ubd80\ud130 \ud604\uc7ac\ube14\ub85d\uae4c\uc9c0 \uac19\uc740 \uc9d1\ud569\n            for (j = prevWall + 1; j <= i; j++) {\n                maze[j] = num;\n            }\n            prevWall = i;\n            num++;\n        }\n    }\n    for (i = prevWall + 1; i < W; i++) {//\ub0a8\uc740 \ube14\ub85d \uc804\ubd80 \uac19\uc740 \uc9d1\ud569\n        maze[i] = num;\n    }\n    num++;\n\n}\n\n//verticalWall\uc774 1\uc774\uba74 |, \uc544\ub2c8\uba74 \' \'\ucd9c\ub825\nvoid makeVerticalWall() {\n    int i;\n    fprintf(fp, "|");\n    for (i = 0; i < W - 1; i++)\n    {\n        fprintf(fp, " ");\n\n        if (verticalWall[i])\n        {\n            fprintf(fp, "|");\n        }\n        else\n        {\n            fprintf(fp, " ");\n        }\n    }\n    fprintf(fp, " |\\n");\n}\n\nvoid makeHorizontalWall() {\n    int i;\n    fprintf(fp, "+");\n    for (i = 0; i < W; i++)\n    {\n        if (horizontalWall[i])\n        {\n            fprintf(fp, "-+");\n        }\n        else\n        {\n            fprintf(fp, " +");\n        }\n    }\n    fprintf(fp, "\\n");\n}\n\nvoid verticalCombine() {\n    int i;\n    int join_flag = 0;\n    int prevMazeNum = maze[0];\n    for (i = 0; i < W; i++) {\n        horizontalWall[i] = rand() % 2;\n        if (horizontalWall[i] == 0) {//\ubcbd\uc774 \uc5c6\ub2e4\uba74\n            join_flag = 1;\n        }\n        if ((i < W - 1) && (prevMazeNum != maze[i + 1])) {\n            if (!join_flag) horizontalWall[i] = 0;\n            else join_flag = 0;\n        }\n        if ((i == W - 1) && (!join_flag)) horizontalWall[i] = 0;//\ub9c8\uc9c0\ub9c9\uae4c\uc9c0 \uc5f0 \uc801 \uc5c6\uc73c\uba74 \uc5f4\uae30\n        if (horizontalWall[i]) {//\ubcbd\uc774 \uc788\uc73c\uba74 \ubc88\ud638 \uac31\uc2e0\n            maze[i] = num;\n            num++;\n        }\n    }\n}\n\nvoid horizontalCombine() {\n    int i, j;\n    int prevMazeNum;\n    for (i = 0; i < W; i++) {\n        if (maze[i] != maze[i + 1]) {//\ub2e4\uc74c\ube14\ub85d\uacfc \ub2e4\ub974\uba74 \ub79c\ub364\ud55c \ubcbd \uc0dd\uc131\n            verticalWall[i] = rand() % 2;\n            if (verticalWall[i] == 0) {//\ubcbd\uc774 \uc5c6\ub2e4\uba74\n                prevMazeNum = maze[i + 1];\n                maze[i + 1] = maze[i];\n            }\n        }\n        else verticalWall[i] = 1;//\ub2e4\uc74c \ube14\ub85d\uacfc \uac19\uc740\uc9d1\ud569\uc774\uba74 \ubabb \ud569\uce5c\ub2e4\n    }\n}\n\nvoid makeMiddleWalls() {\n    int i;\n    for (i = 1; i < H-1; i++) {\n        verticalCombine();\n        makeHorizontalWall();\n        horizontalCombine();\n        makeVerticalWall();\n    }\n}\n\nvoid lastLine() {\n    int i, j;\n    int prevMazeNum;\n    for (i = 0; i < W - 1; i++) {\n        if (maze[i] != maze[i + 1]) {//\ub9c8\uc9c0\ub9c9\ud589\uc740 \ub2e4\ub974\uba74 \ubb34\uc870\uac74 \ud569\uce5c\ub2e4\n            verticalWall[i] = 0;\n            prevMazeNum = maze[i + 1];\n            maze[i + 1] = maze[i];\n            for (j = 0; j < W; j++) {\n                if (maze[j] == prevMazeNum) maze[j] = maze[i];\n            }\n        }\n        else verticalWall[i] = 1;\n    }\n}\n\nint main(void) {\n    fp = fopen("maze.maz", "w");\n    printf("Width: ");\n    scanf("%d", &W);//\ub108\ube44\n    printf("Height: ");\n    scanf("%d", &H);//\ub192\uc774\n    //\ucd08\uae30\ud654\n    horizontalWall = (int*)malloc(sizeof(int) * W);//\ucc98\uc74c \ubcbd\uc744 \uc81c\uc678\ud55c \ubcbd\n    verticalWall = (int*)malloc(sizeof(int) * (W - 1));//\uc591 \ub05d\uc744 \uc81c\uc678\ud55c \ubcbd\n    maze = (int*)malloc(sizeof(int) * W);\n    srand(time(NULL));\n\n    borderWall();\n    firstLine();\n    makeVerticalWall();\n    makeMiddleWalls();\n    verticalCombine();\n    makeHorizontalWall();\n    lastLine();\n    makeVerticalWall();\n    borderWall();\n\n    fclose(fp);\n\n    return 0;\n}\n')))}u.isMDXComponent=!0}}]);