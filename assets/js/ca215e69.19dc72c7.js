"use strict";(self.webpackChunkdogsounds_til=self.webpackChunkdogsounds_til||[]).push([[4896],{68339:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>k});var a=t(39953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),o=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=o(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=o(t),u=r,k=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return t?a.createElement(k,l(l({ref:n},m),{},{components:t})):a.createElement(k,l({ref:n},m))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[d]="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=t[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},69553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var a=t(855),r=(t(39953),t(68339));const i={title:"06 (\ud654)"},l=void 0,p={unversionedId:"\uc1a1\uc740\uc218/23.06/06",id:"\uc1a1\uc740\uc218/23.06/06",title:"06 (\ud654)",description:"*",source:"@site/members/\uc1a1\uc740\uc218/23.06/06.md",sourceDirName:"\uc1a1\uc740\uc218/23.06",slug:"/\uc1a1\uc740\uc218/23.06/06",permalink:"/TIL/members/\uc1a1\uc740\uc218/23.06/06",draft:!1,editUrl:"https://github.com/Self-Driven-Development/TIL/tree/main/members/\uc1a1\uc740\uc218/23.06/06.md",tags:[],version:"current",frontMatter:{title:"06 (\ud654)"},sidebar:"all",previous:{title:"05 (\uc6d4)",permalink:"/TIL/members/\uc1a1\uc740\uc218/23.06/05"},next:{title:"07 (\uc218)",permalink:"/TIL/members/\uc1a1\uc740\uc218/23.06/07"}},s={},o=[{value:"\ubc14\ub514\ud504\ub85c\ud544\uc5d0 \ub300\ud55c \uace0\ucc30",id:"\ubc14\ub514\ud504\ub85c\ud544\uc5d0-\ub300\ud55c-\uace0\ucc30",level:3},{value:"\ub9de\ucdb0\uac04\ub2e4\ub294 \uac83",id:"\ub9de\ucdb0\uac04\ub2e4\ub294-\uac83",level:3},{value:"100\uc77c \uc120\ubb3c",id:"100\uc77c-\uc120\ubb3c",level:3},{value:"\uc790\ub8cc\uad6c\uc870",id:"\uc790\ub8cc\uad6c\uc870",level:2},{value:"Disjoint Sets",id:"disjoint-sets",level:3},{value:"Graph",id:"graph",level:3},{value:"\uadf8\ub798\ud504\uc758 \uad6c\uc131",id:"\uadf8\ub798\ud504\uc758-\uad6c\uc131",level:3},{value:"\ubc29\ud5a5\uc131",id:"\ubc29\ud5a5\uc131",level:3},{value:"Definitions",id:"definitions",level:3},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3},{value:"Connected Components",id:"connected-components",level:3},{value:"Spanning Trees",id:"spanning-trees",level:3},{value:"\ud2b9\uc9d5",id:"\ud2b9\uc9d5",level:3},{value:"Biconnected Components",id:"biconnected-components",level:3},{value:"Kruscal\u2019s Algorithm",id:"kruscals-algorithm",level:3},{value:"\uc790\uad6c \uacfc\uc81c",id:"\uc790\uad6c-\uacfc\uc81c",level:2},{value:"\ucef4\uc2e4 Maze \uad6c\ud604\ud558\uae30",id:"\ucef4\uc2e4-maze-\uad6c\ud604\ud558\uae30",level:2}],m={toc:o},d="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"thinking"},"Thinking"),(0,r.kt)("h3",{id:"\ubc14\ub514\ud504\ub85c\ud544\uc5d0-\ub300\ud55c-\uace0\ucc30"},"\ubc14\ub514\ud504\ub85c\ud544\uc5d0 \ub300\ud55c \uace0\ucc30"),(0,r.kt)("p",null,"\ubc14\ub514\ud504\ub85c\ud544\uc740 \uc815\ub9d0 \uc88b\uc740 \uac78\uae4c? \ubc14\ub514\ud504\ub85c\ud544\uc744 \ucc0d\uae30\uc704\ud574 \uba87 \ub2ec \uc804\ubd80\ud130 \ub2e4\uc774\uc5b4\ud2b8\ub3c4 \ud558\uace0, \uc0b4\ub3c4 \ube7c\uace0, \uc2a4\ud2b8\ub808\uc2a4\ub3c4 \ubc1b\ub294\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\ucc0d\uc740 \ubc14\ub514\ud504\ub85c\ud544\uc740 '\ub098 \uc790\uc2e0'\uc774 \ub9de\uc744\uae4c? '\ud3c9\uc18c\uc758 \ub098'\uc640\ub294 \uc870\uae08 \uad34\ub9ac\uac10\uc774 \uc788\ub294 \uc774\uc0c1\uc801\uc778 \ubaa8\uc2b5\uc758 \ub098\uc774\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\ubc14\ub514\ud504\ub85c\ud544 \uc18d \ub098\uc640 \ud604\uc7ac\uc758 \ub098\ub97c \ube44\uad50\ud558\uba70 \uc790\uad34\uac10\uc5d0 \ube60\uc9c0\uace0 \uc6b0\uc6b8\ud574 \ud55c\ub2e4\uba74, \ubc14\ub514\ud504\ub85c\ud544\uc744 \ucc0d\uc740 \ud589\uc704\ub294 \uc633\uc558\ub2e4\uace0 \ud560 \uc218 \uc788\uc744\uae4c?",(0,r.kt)("br",{parentName:"p"}),"\n","\uccad\ucd98\uc2dc\uc808 \uc544\ub984\ub2e4\uc6b4 \ub098\ub97c \ucc0d\uc5b4 \uac04\uc9c1\ud560 \uc21c \uc788\uc9c0\ub9cc \uadf8\uac83\uc744 \uc81c\uc678\ud558\uace0 \uc804\ubd80 \ub2e8\uc810\uc778\uac8c \ubc14\ub514\ud504\ub85c\ud544\uc774\ub77c\uace0 \uc0dd\uac01\ud55c\ub2e4."),(0,r.kt)("h3",{id:"\ub9de\ucdb0\uac04\ub2e4\ub294-\uac83"},"\ub9de\ucdb0\uac04\ub2e4\ub294 \uac83"),(0,r.kt)("p",null,"\uc5f0\uc560\ub294 \uc0c1\ub300\ub97c \ubc14\uafb8\ub294\uac8c \uc544\ub2c8\ub77c \uc11c\ub85c \ub9de\ucdb0\uac00\ub294 \uac83. \uc0ac\uc18c\ud55c \uac08\ub4f1 \uc18d\uc5d0\uc11c \uc0c1\ub300\uc640 \ub098\uc758 \ub2e4\ub984\uc744 \uc774\ud574\ud558\uace0 \ub9de\ucdb0\uac04\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc11c\uc6b4\ud568\uc744 \ub290\ub07c\ub294 \uc0c1\ub300\ub97c \ubcf4\uba70, \uc11c\uc6b4\ud568\uc744 \ub290\uaef4\ub3c4 \ubc14\ub85c \ud480\ub9ac\uba74 \uc88b\uaca0\ub2e4\uace0 \ud588\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc0ac\ub78c\ub9c8\ub2e4 \uae30\ubd84\uc774 \ud480\ub9ac\uae30 \uc704\ud55c \uc2dc\uac04\uc758 \uc591\uc740 \ub2e4\ub978 \uac83.",(0,r.kt)("br",{parentName:"p"}),"\n","\uae30\ubd84\uc774 \ud480\ub9ac\ub294\ub370 \ud544\uc694\ud55c \uc2dc\uac04\uc774 10\uc778 \uc0ac\ub78c\ud55c\ud14c \ub098\ub294 1\ub9cc\ud07c\uc758 \uc2dc\uac04\ub9cc\uc5d0 \uae30\ubd84\uc774 \ud480\ub9ac\ub2c8\uae50 \ub108\ub3c4 1\ub9cc\ud07c\uc758 \uc2dc\uac04\ub9cc\uc5d0 \ud480\ub9ac\uba74 \uc88b\uaca0\uc5b4!\ub77c\uace0 \ud558\ub294 \uac74 \uac15\uc694\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uadf8 \ub2e4\ub984\uc744 \uc54c\uc544\uac00\uace0 \ub9de\ucdb0\ub098\uac00\uae30 \uc704\ud574 \ub178\ub825\ud55c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc0c1\ub300\ud55c\ud14c \ub098\uc758 \ub9c8\uc74c\uc744 \ud45c\ud604\ud558\ub418 \uac15\uc694\ud558\uc9c0 \uc54a\ub294\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","\uc11c\uc6b4\ud568\uc744 \ub290\ub07c\ub294 \ubd80\ubd84\uc744 \uc0dd\uac01\ud574 \ub2e4\uc2dc \uadf8\ub7ec\uc9c0 \uc54a\ub3c4\ub85d \ub178\ub825\ud558\uace0, \ud480\uc5b4\uc904 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uc0dd\uac01\ud55c\ub2e4.   "),(0,r.kt)("h3",{id:"100\uc77c-\uc120\ubb3c"},"100\uc77c \uc120\ubb3c"),(0,r.kt)("p",null,"\uae30\ub150\uc801 vs \uc2e4\uc6a9\uc801",(0,r.kt)("br",{parentName:"p"}),"\n","\uc120\ubb3c\uc740 \uc5b8\uc81c\ub098 \uc2e4\uc6a9\uc801\uc774\uc5ec\uc57c \ub41c\ub2e4 \uc0dd\uac01\ud55c\ub2e4. \ubbf8\ub2c8\uba40\ub9ac\uc998\uc774\ub2c8\uae50. \ud558\uc9c0\ub9cc \ud55c \ubc88\ubc16\uc5d0 \uc5c6\uc744 \uae30\ub150\uc801\uc778 \ub0a0\uc5d4 \ubb34\uc5b8\uac00 \ud2b9\ubcc4\ud55c \uac8c \uc788\uc5b4\ub3c4 \uc88b\uc9c0 \uc54a\uc744\uae4c? \uadf8\ub7fc \ub458 \ub2e4 \uc900\ube44\ud574\uc57c\uc9c0.",(0,r.kt)("br",{parentName:"p"}),"\n","\ud06c\ub85d\uc2a4+\ud30c\uce20\ub4e4, \ub098\ubb34\uc561\uc790+\ud3b8\uc9c0\ub97c \uc0dd\uac01 \uc911\uc774\ub2e4. \uadfc\ub370 \ud06c\ub85d\uc2a4\uac00 \uc2e4\uc6a9\uc801\uc774\uae30 \uc704\ud574\uc120 \uc0c1\ub300\uc5d0\uac8c \ubbf8\ub9ac \ubb3c\uc5b4\ubd10\uc57c \ud558\ub294\ub370, \uc774\uac70 \ubb3c\uc5b4\ubd10\ub9d0\uc544?"),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"study"},"Study"),(0,r.kt)("h2",{id:"\uc790\ub8cc\uad6c\uc870"},"\uc790\ub8cc\uad6c\uc870"),(0,r.kt)("h3",{id:"disjoint-sets"},"Disjoint Sets"),(0,r.kt)("p",null,"\uacb9\uce58\ub294\uac8c \uc5c6\ub294 \uc6d0\uc18c\ub4e4\uc758 \uc9d1\ud569, \uadf8 \uc9d1\ud569\ub4e4\uc758 \ubaa8\uc784. \ud2b8\ub9ac \ub610\ub294 \ubc30\uc5f4\ub85c \uad6c\ud604\ud55c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","Find()\ub85c \ub300\ud45c\ub178\ub4dc\ub97c \ucc3e\uace0, Union()\uc73c\ub85c \uc9d1\ud569\uc744 \ud569\uce5c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","naive\ud558\uac8c \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uba74 find\ud558\ub294\ub370 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9b4\uc218\ub3c4 \uc788\uace0 Union\uacfc\uc815\uc5d0\uc11c \ud2b8\ub9ac\ud615\ud0dc\uac00 \uc544\ub2cc \ubc30\uc5f4\ud615\ud0dc\ub85c \uad6c\uc131\ub418\uc5b4 \uc2dc\uac04\uc801\uc73c\ub85c \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","find\uacfc\uc815\uc5d0\uc11c \ubaa8\ub4e0 \uc790\uc2dd\ub178\ub4dc\ub4e4\uc774 \ub300\ud45c\ub178\ub4dc\ub97c \uac00\ub9ac\ud0a4\uac8c, Union\uacfc\uc815\uc5d0\uc11c \uc9d1\ud569\uc758 \uc218\uac00 \uc801\uc740 \uc9d1\ud569\uc774 \uc9d1\ud569\uc758 \uc218\uac00 \ud070 \uc9d1\ud569\uc758 \ub300\ud45c\ub178\ub4dc\ub97c \uac00\ub9ac\ud0a4\ub3c4\ub85d \uad6c\uc131\ud574 \uc774\ub97c \ud574\uacb0\ud55c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},"void weightedUnion(int i, int j) {\n    //\ubc30\uc5f4\uc758 \uac12\uc774 \uac2f\uc218\ub97c \uac00\ub9ac\ud0a4\uac8c \ud558\uace0, \uc774\ub54c \uac12\uc740 \uc74c\uc218\uc774\ub2e4.\n    int temp = parent[i] + parent[j]; \n    if(parent[i] > parent[j]) {//j\uc758 \uc6d0\uc18c\uc758 \uac2f\uc218\uac00 \ub354 \ub9ce\uc740 \uacbd\uc6b0\n      parent[i] = j;\n      parent[j] = temp;\n  }\n  else {\n    parent[j] = i;\n    parent[i] = temp;\n    } \n}\n\nint collapsingFind(int i) {\n    int root, trail, lead;\n    //root \ub178\ub4dc \uc124\uc815\n    for(root = i; parent[root] >= 0; root = parent[root])\n    ;\n    //\uacbd\ub85c\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ub178\ub4dc\ub4e4\uc774 \uc804\ubd80 \ub300\ud45c\ub178\ub4dc\ub97c \uac00\ub9ac\ud0a4\uac8c \ubc14\uafbc\ub2e4.\n    for(trail = i; trail != root; trail = lead) {\n    lead = parent[trail];\n    parent[trail] = root;\n  }\n  return root;\n}\n")),(0,r.kt)("h3",{id:"graph"},"Graph"),(0,r.kt)("h3",{id:"\uadf8\ub798\ud504\uc758-\uad6c\uc131"},"\uadf8\ub798\ud504\uc758 \uad6c\uc131"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"V : vertex, \uc720\ud55c\uac1c\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"E : edge, \ucd5c\ub300\uac2f\uc218\ub294 ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"v"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mi",{parentName:"mrow"},"v"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,r.kt)("mn",{parentName:"mrow"},"2")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(v+1)v/2")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"mord"},"/"),(0,r.kt)("span",{parentName:"span",className:"mord"},"2")))))," \uc774\ub2e4. \ubaa8\ub4e0 edge\uac00 \uc874\uc7ac\ud558\uba74 \uc774\ub97c complete graph\ub77c\uace0 \ud55c\ub2e4.\n\uc8fc\ub85c G=(V, E)\ub85c \uadf8\ub798\ud504\ub97c \ud45c\ud604\ud55c\ub2e4.")),(0,r.kt)("h3",{id:"\ubc29\ud5a5\uc131"},"\ubc29\ud5a5\uc131"),(0,r.kt)("p",null,"\ubcf4\ud1b5 indirected graph\ub97c \uc0ac\uc6a9\ud558\uace0, \ubc29\ud5a5\uc131\uc774 \uc788\ub294 \uadf8\ub798\ud504\ub97c \uc0ac\uc6a9\ud558\uba74 digraph\ub77c\uace0 \ud45c\uae30\ud55c\ub2e4.\nindirect graph\uc5d0\uc11c (t,h)\uc640 (h,t)\uc778 edge\ub294 \uac19\uc740 edge\uc774\ub2e4."),(0,r.kt)("h3",{id:"definitions"},"Definitions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Adjacent : \ub450 vertex\uac00 edge\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4\uba74 \ub450 vertex\ub294 adjacent\ud558\ub2e4\uace0 \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"incident : \ub450 vertex\ub97c adjacent\ud558\uac8c \uc774\uc5b4\uc8fc\ub294 edge\ub97c \ud574\ub2f9 vertex\ub4e4\uc5d0 incident\ud55c edge\ub77c\uace0 \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"subgraph : G\uc5d0\uc11c \ud30c\uc0dd\ub41c G\u2019\ub97c subgraph\ub77c\uace0 \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"length: # of edges"),(0,r.kt)("li",{parentName:"ul"},"simple path : \uc5f0\uacb0\ub41c edge\uc5d0\uc11c \ucc98\uc74c\uacfc \ub05d vertex\ub97c \uc81c\uc678\ud558\uace0 \uacb9\uce58\ub294 vertex\uac00 \uc5c6\ub294 \uacbd\ub85c"),(0,r.kt)("li",{parentName:"ul"},"cycle : \ucc98\uc74c\uacfc \ub05d\uc758 vertex\uac00 \uac19\uc740 \uacbd\ub85c"),(0,r.kt)("li",{parentName:"ul"},"connected : \ub450 vertex\ub97c \uc5f0\uacb0\ud558\ub294 edge\ub4e4\uc758 \uc9d1\ud569\uc774 \uc874\uc7ac\ud558\uba74 \ub450 vertex\ub294 connected"),(0,r.kt)("li",{parentName:"ul"},"component connected(\uc5f0\uacb0\uc131\ubd84) : \ub178\ub4dc\ub4e4\uc744 \uc5f0\uacb0\ud558\ub294 \ub2e4\ub978 subgraph\uac00 \uc5c6\ub2e4\uba74 \uc774\ub4e4\uc740 \uc5f0\uacb0\uc131\ubd84\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"tree : graph\uac00 connected acyclic(\ube44\uc21c\ud658) graph\ub77c\uba74 tree. \uc989 Tree\ub294 graph\uc758 \ud55c \uc885\ub958\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"degree :  \ud574\ub2f9 vertex\uc5d0 \uc774\uc5b4\uc838\uc788\ub294 edge\uc758 \uac2f\uc218\n\uadf8\ub798\ud504\ub294 \ud589\ub82c\ud639\uc740 \ub9ac\uc2a4\ud2b8\ub85c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4.\n\ub450 \uadf8\ub798\ud504 \uc0ac\uc774\uc5d0 \ube44\uc6a9 \ud639\uc740 \uac70\ub9ac \uac19\uc740 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \ud574\ub2f9 \uac12\uc744 edge\uc758 \uac00\uc911\uce58\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.")),(0,r.kt)("h3",{id:"dfs"},"DFS"),(0,r.kt)("p",null,"DFS vs BFS",(0,r.kt)("br",{parentName:"p"}),"\n","\uae4a\uc774\ud0d0\uc0c9 vs \ub108\ube44\ud0d0\uc0c9. \uc0c1\ud669\uc744 \ubd10\uac00\uba70 \ud544\uc694\ud55c \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","DFS\ub97c \uad6c\ud604\ud558\uae30\uc704\ud574 2\ucc28\uc6d0\ubc30\uc5f4\uacfc \ubc29\ubb38\ud655\uc778\uc744 \uc704\ud55c visited\ubc30\uc5f4\uc774 \ud544\uc694\ud558\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},'void dfs(int v) {\n  /* depth first search of a graph beginning at v */\n  nodePointer w;\n  visited[v] = 1;  // visited[] is a global variable\n  printf("%5d", v);\n  for(w = graph[v]; w; w = w->link)\n    if(!visited[w->vertex])\n      dfs(w->vertex);\n}\n')),(0,r.kt)("p",null,"\uc774\ub97c \ubc18\ubcf5\ubb38\uc73c\ub85c \uad6c\ud604\ud574\ubcf4\uba74"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},'void dfs_iterative(int v) {\n\n  nodePointer w;\n  int u;\n  push(&top, v);\n  \n  while(top) {\n    u = pop(&top);\n    if(!visited[u]) {\n      printf("%5d", u);\n      visited[u] = 1;\n\n      for(w = graph[u]; w; w = w->link)\n        if(!visited[w->vertex])\n          push(&top, w->vertex);\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"bfs"},"BFS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},'void bfs(int v) {\n  nodePointer w;\n  visited[v] = 1;\n  printf("%5d", v);\n  addq(&front, &rear, v);\n  while(front) {\n    v = deleteq(&front);\n    for(w = graph[v]; w; w=w->link)\n      if(!visited[w->vertex]) {\n        printf("%5d", w->vertex);\n        addq(&front, &rear, w->vertex);\n        visited[w->vertex] = 1;\n      }\n  }\n}\n')),(0,r.kt)("h3",{id:"connected-components"},"Connected Components"),(0,r.kt)("p",null,"DFS, BFS\ub97c \ub3cc\ub824 \uc5f0\uacb0\ub418\uc5b4\uc788\ub294 \ub178\ub4dc\ub4e4\uc740 connected components\uc774\ub2e4.\n\uc989, \ubc29\ubb38\uccb4\ud06c\ub97c \ud558\ub294 \ubc30\uc5f4\uc5d0 \ubc18\ubcf5\ubb38\uc744 \ub3cc\ub824 \ubc29\ubb38\ub418\uc9c0 \uc54a\uc740 \ub178\ub4dc\ub77c\uba74 dfs\ud639\uc740bfs\ub97c \uc2e4\ud589\ud55c\ub2e4."),(0,r.kt)("h3",{id:"spanning-trees"},"Spanning Trees"),(0,r.kt)("p",null,"\uadf8\ub798\ud504\uc758 \ubaa8\ub4e0 vertex\ub4e4\uc744 \uc21c\ud68c\ud558\ub294 \ud2b8\ub9ac\ub97c Spanning Tree\ub77c\uace0 \ud55c\ub2e4.\nGraph\uc5d0\uc11c DFS, BFS\ub97c \uc2e4\ud589\ud558\uba74 spanning tree\ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4."),(0,r.kt)("h3",{id:"\ud2b9\uc9d5"},"\ud2b9\uc9d5"),(0,r.kt)("p",null,"edge\ub97c \ub450 \uc9d1\ud569\uc73c\ub85c \ub098\ub20c \uc218 \uc788\ub2e4."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"T : \uac80\uc0c9\uacfc\uc815\uc5d0\uc11c \uc0ac\uc6a9\ub41c edge"),(0,r.kt)("li",{parentName:"ul"},"N : \uac80\uc0c9\uacfc\uc815\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 edge\n\uc2a4\ud328\ub2dd\ud2b8\ub9ac\ub294 T\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uace0, N\uc758 \uc5b4\ub290 edge\ub4e0 \ucd94\uac00\ud558\uba74 \uc774\ub294 Cycle\uc774 \uc0dd\uae34\ub2e4.\n\uc77c\ub2e8\uc740 \uc774\ub300\ub85c \ud558\uba74 \ub420 \uac70\uac19\ub2e4.")),(0,r.kt)("h3",{id:"biconnected-components"},"Biconnected Components"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"articulation point : vertex\uc640 vertex\uc640 \uc778\uc811\ud55c edge\ub4e4\uc744 \uc0ad\uc81c \uc2dc\ucf30\uc744 \ub54c \uadf8\ub798\ud504\uac00 disconnected\ub41c\ub2e4\uba74 \ud574\ub2f9 vertex\ub294 articulation point\uc774\ub2e4.\nariticulation point\uc5d0\uc11c \ubd84\ud560\ud55c \uadf8\ub798\ud504\ub4e4\uc758 \uc9d1\ud569\uc744 BCC\ub77c\uace0 \ud55c\ub2e4.\nariticulation point\ub294 DFS\uacfc\uc815\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub2e4.\nDFS\ub97c \ub3cc\ub824 spanning tree\ub97c \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 \uae30\uc874 \uadf8\ub798\ud504\uc5d0\ub294 \uc788\uc73c\uba74\uc11c SpanningTree\uc5d0 \uc788\uc9c0 \uc54a\ub294 edge(back edge)\ub97c \uc810\uc120\uc73c\ub85c \ub9cc\ub4e0\ub2e4.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Spanning tree\uc758 root \ub178\ub4dc\uac00 \ub450\uac1c\uc774\uc0c1\uc758 \uc790\uc2dd\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \uc774 \ub178\ub4dc\ub294 AP\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"nonroot\ub178\ub4dc\ub4e4\uc5d0 \ub300\ud558\uc5ec \uc601\ud1a0\ud655\uc7a5\uc744 \ud574\uac00\uba70, \uacb9\uce58\ub294 \ud3ec\uc778\ud2b8\ub294 AP\uac00 \ub41c\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"Spanning tree\uc758 leaf\ub178\ub4dc\ub4e4\uc740 AP\uac00 \ub420 \uc218 \uc5c6\ub2e4.")),(0,r.kt)("h3",{id:"kruscals-algorithm"},"Kruscal\u2019s Algorithm"),(0,r.kt)("p",null,"Minimum spanning tree(MST)\ub97c \uad6c\ud558\uae30 \uc704\ud55c \ubc29\ubc95 \uc911 \ud558\ub098\uc774\ub2e4."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\uac04\uc120\ub4e4\uc758 \uac00\uc911\uce58\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"\uc791\uc740 \uac00\uc911\uce58\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uac04\uc120\ub4e4\uc744 \uba3c\uc800 \ud0dd\ud558\uba70, cycle\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. "),(0,r.kt)("li",{parentName:"ol"},"\uac04\uc120\uc774 n-1\uac1c \uc120\ud0dd\ub418\uba74 \uc885\ub8cc\ud55c\ub2e4.")),(0,r.kt)("h2",{id:"\uc790\uad6c-\uacfc\uc81c"},"\uc790\uad6c \uacfc\uc81c"),(0,r.kt)("p",null,"pseudo code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},'#include <stdio.h>\n#include <stdlib.h>\n\nint main(void){\n  \ud30c\uc77c\uc5f4\uae30;\n  if(\ud30c\uc77c\uc758 \uc778\uc790\uac00 1\uac1c\uac00 \uc544\ub2c8\ub77c\uba74){\n    printf("usage: ./fp1 input_filename:\\n");\n    return 0;\n  }\n  else if(\ud30c\uc77c\uc774 \uc5c6\ub2e4\uba74){\n    printf("The input file does not exist.\\n");\n    return 0;\n  }\n  //vertex_number : vertex\uc758 \uac2f\uc218\n  //edge_number : edge\uc758 \uac2f\uc218\n  int vertex_number, edge_number;\n  fscanf(f,"%d%d",&vertex_number, &edge_number);\n  for(){\n    \uac04\uc120\uc758 \uc815\ubcf4 \uc785\ub825\ubc1b\uae30{src,det,weight};//\uad6c\uc870\uccb4 \uc815\uc758\n    minheap(\uac04\uc120);//minheap \uc815\uc758, \uac00\uc911\uce58\ub97c \uae30\uc900\uc73c\ub85c minheap\uad6c\ud604\n  }\n  int sum_weight=0;//\uac00\uc911\uce58\uc758 \ud569 \uc5f0\uc0b0\n  struct aa[];//\uac00\uc911\uce58\uac00 \ub0ae\uc740 \uc21c\uc11c\ub300\ub85c \uac04\uc120\uc744 \ucd9c\ub825\ud558\uae30 \uc704\ud55c \uad6c\uc870\uccb4 \ubc30\uc5f4\n  int i=0;\n  while(\uc120\ud0dd\ub41c \uac04\uc120\uc758 \uac2f\uc218<vertex_number-1){//disjoint set\uc758 \ubc30\uc5f4 \uac12\uc774 set\uc758 \ubc30\uc5f4\uac12\uc774 \ub418\ub3c4\ub85d \uc124\uc815\n    struct a=delete_minheap();//\uac00\uc911\uce58\uac00 \uc791\uc740 \uac04\uc120\ubd80\ud130 \uc120\ud0dd\n    if(a==NULL) break;//disconnected\ub77c\uba74 break;\n    if(find(src)!=find(det)){//\uac04\uc120\uc774 \uc11c\ub85c \ub2e4\ub978 \uc9d1\ud569\uc774\uba74\n      union(src,det);\n      sum_weight+= a.weight;\n      aa[i++]=a;\n    }\n  }\n  for(aa\uc5d0 \uc788\ub294 \ubc30\uc5f4\ub4e4 \uc21c\uc11c\ub300\ub85c \ud30c\uc77c\uc5d0 \ucd9c\ub825);\n  fprintf(f,"%d\\n",sum_weight);\n  if(while\ubb38\uc774 disconnected\ub85c \uc885\ub8cc\ub418\uc5c8\ub2e4\uba74) fprintf(f,"DISCONNECTED");\n  else fprintf(f,"CONNECTED");\n  \ud30c\uc77c\ub2eb\uae30;\n  return 0;\n}\n')),(0,r.kt)("h2",{id:"\ucef4\uc2e4-maze-\uad6c\ud604\ud558\uae30"},"\ucef4\uc2e4 Maze \uad6c\ud604\ud558\uae30"),(0,r.kt)("p",null,"\ubbf8\ub85c \ucc3e\uae30\ub97c dfs, bfs\ub85c \uad6c\ud604\ud574\uc57c\ub418\ub294\ub370 \uc5b4\ub5bb\uac8c \ud574\uc57c\ub418\ub294\uc9c0\ub97c \ubaa8\ub974\uaca0\ub2e4.",(0,r.kt)("br",{parentName:"p"}),"\n","2\ucc28\uc6d4 \ubc30\uc5f4\ub85c \uc800\uc7a5\ud574\uc11c \ubcbd\uc744 1\ub85c \ucc98\ub9ac..?",(0,r.kt)("br",{parentName:"p"}),"\n","\ud55c\uc904\uc529 \uc785\ub825\ubc1b\uc73c\uba70 \ub178\ub4dc\ub4e4\uc744 \uc774\uc5b4\uc8fc\uae30..?"))}c.isMDXComponent=!0}}]);